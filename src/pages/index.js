import Head from "next/head";
import { useForm } from "react-hook-form";
import { useState } from "react";

export default function Home() {
  const {
    register,
    handleSubmit,
    //getValues,
    formState: { errors },
  } = useForm({
    mode: "onBlur",
  });

  const [isTigerSelected, setIsTigerSelected] = useState(false);

  const handleAnimalChange = (e) => {
    setIsTigerSelected(e.target.value === "tiger");
  };

  const onSubmit = (data) => {
    console.log(data);
  };

  return (
    <>
      <Head>
        <title>Springload form test</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>

      <section className="section__form h-screen">
        <div className="section__form-container w-full h-full overflow-scroll mx-auto lg:flex lg:items-center lg:justify-center">
          <div className="px-4 py-12 w-full max-w-[600px]">
            <h1 className="h1 font-sans text-3xl font-bold mb-6">
              Contact form
            </h1>

            <form className="form" onSubmit={handleSubmit(onSubmit)}>
              <label
                htmlFor="email"
                className={errors.email ? "block mb-4 error" : "block mb-4"}
              >
                <span className="font-sans text-md">
                  What is your email address?
                </span>
                <input
                  type="text"
                  name="email"
                  id="email"
                  className="form-input block w-full border border-black rounded-md p-2 mt-2 font-sans text-md"
                  {...register("email", {
                    required: "Email is required",
                    pattern: {
                      value: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/,
                    },
                  })}
                  aria-invalid={errors.email ? "true" : "false"}
                  aria-describedby={errors.email ? "email-error" : undefined}
                />

                {errors.email && (
                  <span className="font-sans text-xs font-bold text-red">
                    Enter a valid email address
                  </span>
                )}
              </label>

              <label
                htmlFor="password"
                className={errors.password ? "block mb-4 error" : "block mb-4"}
              >
                <span className="font-sans text-md">
                  Please enter a password
                </span>
                <input
                  type="password"
                  name="password"
                  id="password"
                  className="form-input block w-full border border-black rounded-md p-2 mt-2 font-sans text-md"
                  {...register("password", {
                    required: "Password is required",
                    minLength: {
                      value: 8,
                      message: "Password must be at least 8 characters long",
                    },
                  })}
                  aria-invalid={errors.password ? "true" : "false"}
                  aria-describedby={
                    errors.password ? "password-error" : undefined
                  }
                />

                {errors.password && (
                  <span className="font-sans text-xs font-bold text-red">
                    Enter a valid password, must be longer than 8 characters
                  </span>
                )}
              </label>

              <fieldset className="mb-4 block">
                <legend className="font-sans text-md mb-4 block">
                  Please select a colour
                </legend>
                <label
                  className="flex items-center justify-start cursor-pointer"
                  htmlFor="blue"
                >
                  <input
                    type="radio"
                    id="blue"
                    name="colour"
                    value="blue"
                    {...register("colour", { required: "Colour is required" })}
                  />
                  <span className="font-sans text-md ml-2">Blue</span>
                </label>
                <label
                  className="flex items-center justify-start cursor-pointer"
                  htmlFor="green"
                >
                  <input
                    type="radio"
                    id="green"
                    name="colour"
                    value="green"
                    {...register("colour", { required: "Colour is required" })}
                  />
                  <span className="font-sans text-md ml-2">Green</span>
                </label>
                <label
                  className="flex items-center justify-start cursor-pointer"
                  htmlFor="red"
                >
                  <input
                    type="radio"
                    id="red"
                    name="colour"
                    value="red"
                    {...register("colour", { required: "Colour is required" })}
                  />
                  <span className="font-sans text-md ml-2">Red</span>
                </label>
                <label
                  className="flex items-center justify-start cursor-pointer"
                  htmlFor="black"
                >
                  <input
                    type="radio"
                    id="black"
                    name="colour"
                    value="black"
                    {...register("colour", { required: "Colour is required" })}
                  />
                  <span className="font-sans text-md ml-2">Black</span>
                </label>

                <label
                  className="flex items-center justify-start cursor-pointer"
                  htmlFor="brown"
                >
                  <input
                    type="radio"
                    id="brown"
                    name="colour"
                    value="brown"
                    {...register("colour", { required: "Colour is required" })}
                  />
                  <span className="font-sans text-md ml-2">Brown</span>
                </label>

                {errors.colour && (
                  <span className="font-sans text-xs font-bold text-red">
                    Please select a colour
                  </span>
                )}
              </fieldset>

              <fieldset className="mb-4 block">
                <legend className="font-sans text-md mb-4 block">
                  Please select an animal
                </legend>
                <label
                  className="flex items-center justify-start cursor-pointer"
                  htmlFor="bear"
                >
                  <input
                    type="checkbox"
                    id="bear"
                    name="animal"
                    value="bear"
                    {...register("animal", { required: "Animal is required" })}
                    onChange={handleAnimalChange}
                  />
                  <span className="font-sans text-md ml-2">Bear</span>
                </label>
                <label
                  className="flex items-center justify-start cursor-pointer"
                  htmlFor="tiger"
                >
                  <input
                    type="checkbox"
                    id="tiger"
                    name="animal"
                    value="tiger"
                    {...register("animal", { required: "Animal is required" })}
                    onChange={handleAnimalChange}
                  />
                  <span className="font-sans text-md ml-2">Tiger</span>
                </label>
                <label
                  className="flex items-center justify-start cursor-pointer"
                  htmlFor="snake"
                >
                  <input
                    type="checkbox"
                    id="snake"
                    name="animal"
                    value="snake"
                    {...register("animal", { required: "Animal is required" })}
                    onChange={handleAnimalChange}
                  />
                  <span className="font-sans text-md ml-2">Snake</span>
                </label>
                <label
                  className="flex items-center justify-start cursor-pointer"
                  htmlFor="donkey"
                >
                  <input
                    type="checkbox"
                    id="donkey"
                    name="animal"
                    value="donkey"
                    {...register("colour", { required: "Animal is required" })}
                    onChange={handleAnimalChange}
                  />
                  <span className="font-sans text-md ml-2">Donkey</span>
                </label>

                {errors.animal && (
                  <span className="font-sans text-xs font-bold text-red">
                    Please select an animal
                  </span>
                )}
              </fieldset>

              {isTigerSelected && (
                <label
                  htmlFor="text"
                  className={errors.text ? "block mb-4 error" : "block mb-4"}
                >
                  <span className="font-sans text-md">Type of tiger</span>
                  <input
                    type="text"
                    name="text"
                    id="text"
                    className="form-input block w-full border border-black rounded-md p-2 mt-2 font-sans text-md"
                    {...register("text", {
                      required: "Text is required",
                    })}
                    aria-invalid={errors.text ? "true" : "false"}
                    aria-describedby={errors.text ? "text-error" : undefined}
                  />

                  {errors.text && (
                    <span className="font-sans text-xs font-bold text-red">
                      Please enter your type of tiger
                    </span>
                  )}
                </label>
              )}

              <div className="flex justify-start mt-6">
                <button
                  type="submit"
                  className="primary font-sans font-bold bg-[#50C878] px-4 py-2 rounded-md text-white text-md hover:bg-[#3D9E72] transition duration-300 ease-in-out"
                >
                  Submit
                </button>
              </div>
            </form>
          </div>
        </div>
      </section>
    </>
  );
}
